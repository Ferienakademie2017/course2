

- nochmal Divergenz-Loss testen
- Generierung der initialen Bedingungen (halb erledigt)
- Zeitschritt?
- Command Line Parser? (David: von customPlot.py übernehmen?)
- Kommentierung
- Benennung der Variablen in TensorFlow
- bessere Behandlung von BatchNorm/Dropout zur Testzeit
- GAN
- Netzwerk auf eigenen Outputs trainieren
- Loss auf mehreren Zeitschritten
- Exponential decay für den Loss im Mehrschritttraining


Vorschläge aus master:
- complex neural networks (convolutions)
- higher grid resolution for the Mantaflow simulation
- complex obstacles (use bitmasks)
- other scenarios: e.g., fixed number of inlets and outlets in a closed
  2D 'room' (simulation air ventilation, vary positions / size of inlets and out
  lets)
- add time dependency / dynamics
- produce some cools animations 

Erledigt:
- Mantaflow-Ausgabe entfernen
- Geschwindigkeiten in Hindernisse
- Visualisierungen des Flusses
- Loss (was bei Hindernissen)?
- Divergenz-Loss (L2) (nicht in obstacles!)
- Speichern der Trainingsbeispiele und der Netzwerkparameter
- Konvertierung Mantaflow -> Tensorflow (vielleicht Flag-Grid mit Zelltypen mit konvertieren?)
- Visualisierung des Trainings-/Validierungs-/Testfehlers (live? nachher? Konsole?)
- Struktur: Trainingsbeispiele generieren (MantaFlow)
- Optimizer?

